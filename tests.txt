hghg' f' (cap, 2) .j 'g' ''
hghg' f' .j 'g' ''
hghg' f' .(cap, 2) .j 'g' ''
a. a. . a. (up, 3)
aa. aa. ... .. . aa. (cap, 3) .
' '  '  '  ' sa'm gt' '
Ã©ghg (cap) ' f' (cap, 2) .j 'g' ''










package functions

import (
	"fmt"
	"reflect"
	"strings"
)

func ApplayModifications(str string) string {
	lines := strings.Split(str, "\n")
	var FinalWordsSlice [][]string
	for _, line := range lines {
		words := strings.Fields(line)
		words = ApplayFlag(words)
		words = ApplayPunctuations(words)
		words = ApplayQuotes(words)
		for {
			transformedWords := ApplayFlag(words)
			if reflect.DeepEqual(transformedWords, words) {
				break
			}
			words = transformedWords
		}
		FinalWordsSlice = append(FinalWordsSlice, words)
		fmt.Println("finalWordSlice = ", FinalWordsSlice)
	}
	// slice = ApplayFlag(slice)
	// slice = ApplayPunctuations(slice)
	// slice = ApplayQuotes(slice)
	strFinal := ""
	for i, v := range FinalWordsSlice {
		fmt.Println("v = ", v)
		strFinal += strings.Join(v, " ")
		if i < len(FinalWordsSlice)-1 {
			strFinal += "\n"
		}
	}
	fmt.Println("strfinal = ", strFinal)
	return strFinal
}
